<?xml version="1.0" encoding="UTF-8"?>  
      
    <!-- 从高到地低 OFF 、 FATAL 、 ERROR 、 WARN 、 INFO 、 DEBUG 、 TRACE 、 ALL -->  
    <!-- 日志输出规则  根据当前ROOT 级别，日志输出时，级别高于root默认的级别时  会输出 -->  
    <!-- 以下  每个配置的 filter 是过滤掉输出文件里面，会出现高级别文件，依然出现低级别的日志信息，通过filter 过滤只记录本级别的日志-->  
      
      
    <!-- 属性描述 scan：性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。   
        debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->  
    <configuration scan="true" scanPeriod="60 seconds" debug="false">  
        <property name="SYS_LOG_DIR" value="/tmp" />  
    	<property name="LOG_FILE" value="aiop.log" />  
    	<property name="fileLayoutPattern"  
        value="%d{yyyy-MM-dd HH:mm:ss:SSS} [%thread] [%level] %logger -%msg%n" />  
        <!-- 日志最大的历史 30天 -->  
        <property name="maxHistory" value="30"/>  
      
        <!-- ConsoleAppender 控制台输出日志 -->  
        <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">  
            <!-- 对日志进行格式化 -->  
            <encoder>  
                <pattern>%d{yyyy-MM-dd HH:mm:ss:SSS} [%thread] [%-5level] %logger -%msg%n</pattern>  
            </encoder>  
        </appender>  
        
         <appender name="LOG_ROLLING"  
	        class="ch.qos.logback.core.rolling.RollingFileAppender">  
	        <file>${SYS_LOG_DIR}/${LOG_FILE}</file>     
	        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">  
	            <fileNamePattern>${SYS_LOG_DIR}/%d{yyyy-MM-dd}/${LOG_FILE}_%d{yyyy-MM-dd}_%i.zip</fileNamePattern>  
	            <timeBasedFileNamingAndTriggeringPolicy  
	                class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">  
	                <maxFileSize>50MB</maxFileSize>  
	            </timeBasedFileNamingAndTriggeringPolicy>  
	        </rollingPolicy>  
	        <layout>  
	            <pattern>${fileLayoutPattern}</pattern>  
	        </layout>  
	    </appender>    
      
        <logger name="java.sql.PreparedStatement" value="DEBUG" />    
        <logger name="java.sql.Connection" value="DEBUG" />    
        <logger name="java.sql.Statement" value="DEBUG" />    
        <logger name="com.ibatis" value="DEBUG" />    
        <logger name="com.ibatis.common.jdbc.SimpleDataSource" value="DEBUG" />    
        <logger name="com.ibatis.common.jdbc.ScriptRunner" level="DEBUG"/>    
        <logger name="com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate" value="DEBUG" />          
          
        <!-- root级别   DEBUG -->  
        <root level="INFO">  
            <!-- 控制台输出 -->  
            <appender-ref ref="STDOUT" />  
            <appender-ref ref="LOG_ROLLING" />  
        </root>  
    </configuration>  